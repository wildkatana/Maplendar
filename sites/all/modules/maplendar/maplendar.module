<?php

//==============================================================================
// MENU
//==============================================================================

include 'maplendar.ben.inc';

/**
 * Implements hook_menu
 * 
 * Leighton Notes:
 * This is a special Drupal hook that lets us register paths and callback functions.
 * Paths are like URLs on the site that we want to create, and the callback functions
 * are what generate the content for that url.
 * There are various variables that can be included in the paths, such as %maplendar_group,
 * %user, and just general % variables. These can be passed into the callback functions
 * so that we can create different maps for different groups, and different calendars
 * for different users, etc.
 */
function maplendar_menu() {
  $items = array();
  $items['group/%maplendar_group'] = array(
    'title' => 'Map',
    'page callback' => 'maplendar_map_page',
    'page arguments' => array(1),
    'access callback' => 'maplendar_map_access',
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['group/%maplendar_group/map'] = array(
    'title' => 'Map',
    'page callback' => 'maplendar_map_page',
    'page arguments' => array(1),
    'access callback' => 'maplendar_map_access',
    'access arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['group/%maplendar_group/invite'] = array(
    'title' => 'Invite',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('maplendar_invite_form', 1),
    'access callback' => 'maplendar_map_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['maplendar/%user/log/%'] = array(
    'page callback' => 'maplendar_log_position',
    'page arguments' => array(1),
    'access callback' => 'maplendar_log_access',
    'access arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'maplendar_calendar_page',
    'page arguments' => array(1),
    'access callback' => 'maplendar_calendar_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/calendar/add'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('maplendar_add_event_form', 1),
    'access callback' => 'maplendar_calendar_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['invitation/accept/%/%maplendar_invitation'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('maplendar_accept_invite_form', 2, 3),
    'access callback' => 'maplendar_accept_invite_access',
    'access arguments' => array(2, 3),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Access callback for the accept invite page
 * 
 * Leighton Notes:
 * We want to make sure that only registered users can accept invites.
 */
function maplendar_accept_invite_access() {
  global $user;
  if ($user->uid) {
    return TRUE;
  }
  else {
    drupal_goto('user/register', array('query' => drupal_get_destination()));
  }
}

/**
 * Access callback for the calendar page
 * 
 * Leighton Notes:
 * This is a function that will be called when the user tries to access a calendar page.
 * We should check that the user has the proper access to see the page (ie they are
 * in the same group as the $account). For now we are just returning TRUE to always
 * grant access, but this will need to be changed before production.
 */
function maplendar_calendar_access($account) {
  return TRUE; // TODO - Check that the user is in the user's group or not
}

/**
 * Check if the attempt to log position for a user is valid
 * 
 * Leighton Notes:
 * This is the access callback to check if the log is a proper log from the system.
 * We determine this by checking the key, which is the md5 checksum of a user's
 * creation date. This is to prevent people from spoofing data and other hacking attempts.
 */
function maplendar_log_access($account, $key) {
  // Check if the key is set in the user object. Currently the key is just the md5 of the
  // user created timestamp. Should be more secure in real environment, randomly
  // generated each time
  if (md5($account->created) == $key) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Check if the user has access to view the map for this group
 * 
 * Leighton Notes:
 * This is the access callback to make sure that the user has access to view the
 * group's map page (ie they should be a member of the group). This is to prevent
 * random people from seeing your maps.
 */
function maplendar_map_access($group) {
  global $user;
  return maplendar_group_access_check($group->id, $user->uid);
}

/**
 * Checks if a user is in a group
 * 
 * Leighton Notes:
 * We just load the group members for a group and make sure that the user id passed
 * is in that group. If it is, we return TRUE, if not, we return FALSE.
 */
function maplendar_group_access_check($gid, $uid) {
  $result = db_select('maplendar_group_members', 'gm')
    ->fields('gm')
    ->condition('gm.uid', $uid, '=')
    ->condition('gm.gid', $gid, '=')
    ->execute();
  
  foreach ($result as $record) {
    return TRUE;
  }
  
  return FALSE;
}


//==============================================================================
// FUNCTIONS
//==============================================================================

/**
 * Implements hook_user_load()
 * 
 * Leighton Notes:
 * Drupal calls this function when it loads a user from the database (which happens a lot)
 * What we do here is add the events for the user, both from our database table and from
 * Google Calendar if they have it set, to the $user object
 * 
 * We also add the saved geolocation data to the user object here too
 */
function maplendar_user_load($users) {
  // We use this to load the geolocation data into the user object
  $result = db_query('SELECT * FROM {maplendar_info} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    // Add the geolocation data to the user object from our database table
    $users[$record->uid]->maplendar_geolocation = $record;
    
    // Get the events for the user from our database table
    $events = maplendar_get_user_events($record->uid);
    
    // See if this member has a google calendar, and if so, get those events
    if (!empty($users[$record->uid]->field_google_calendar_private_xm['und'][0]['value'])) {
      $google_events = maplendar_get_google_calendar($users[$record->uid]->field_google_calendar_private_xm['und'][0]['value']);
      $events += $google_events;
    }
    // Sort the events by the timestamp so they are in order
    ksort($events);
    // Add them to the user object
    $users[$record->uid]->events = $events;
  }
}

/**
 * Implements hook_user_insert
 * 
 * Leighton Notes:
 * Drupal calls this function whenever a new user is saved
 */
function maplendar_user_insert(&$edit, $account, $category) {
  // Not used right now
}

/**
 * Gets an array of events from the database
 * 
 * Leighton Notes:
 * This does an SQL select statement to get the events for the user id that is passed
 * in from our database table 'maplendar_events' and returns them in an array keyed
 * by the start_time timestamp
 */
function maplendar_get_user_events($uid) {
  $result = db_select('maplendar_events', 'e')
    ->fields('e')
    ->condition('uid', $uid)
    ->execute();
  
  $events = array();
  
  foreach ($result as $row) {
    $events[$row->start_time] = array(
      'title' => $row->title,
      'date_string' => date('M d, Y', $row->start_time),
      'time_string' => date('g:i A', $row->start_time),
      'start' => $row->start_time,
      'where' => $row->place,
      'end' => $row->end_time,
    );
  }
  
  return $events;
}

/**
 * Load an invitation record from the database
 */
function maplendar_invitation_load($id) {
  $result = db_select('maplendar_invites', 'i')
    ->fields('i')
    ->condition('id', $id)
    ->execute();
  
  foreach ($result as $invitation) {
    return $invitation;
  }
  
  return FALSE;
}

/**
 * Loads a group given an id
 * 
 * Leighton Notes:
 * This loads a group from the database table 'maplendar_groups' by it's group id,
 * then fills it's members property with an array of members belonging to the group,
 * as saved in the 'maplendar_group_members' database table
 */
function maplendar_group_load($gid) {
  $result = db_select('maplendar_groups', 'g')
    ->condition('id', $gid)
    ->fields('g')
    ->execute();
  
  foreach ($result as $group) {
    // Load the members for this group
    $group->members = array();
    
    $result2 = db_select('maplendar_group_members', 'gm')
      ->fields('gm')
      ->execute();
    
    foreach ($result2 as $row) {
      if ($member = user_load($row->uid)) {
        $group->members[$row->uid] = $member;
      }
    }
    
    return $group;
  }
  
  return FALSE;
}

/**
 * Implements hook_theme()
 * 
 * Leighton Notes:
 * This function tells drupal which custom 'theme' functions we have, and where the
 * template files (.tpl.php) are that should be called to build the output for each
 * theme call, as well as any variables that will be passed in to those theme files
 * 
 * Note that these two theme functions we are registering relate to the two .tpl.php files
 * we use for the map and calendar pages
 */
function maplendar_theme($existing, $type, $theme, $path) {
  return array(
    'maplendar_map_page' => array(
      'template' => 'maplendar_map_page',
      'variables' => array(
      	'group' => NULL,
        ),
    ),
    'maplendar_calendar_page' => array(
      'template' => 'maplendar_calendar_page',
      'variables' => array(
        'account' => NULL,
        ),
    ),
    'maplendar_date' => array(
      'arguments' => array('element' => NULL),
      'render element' => 'element',
    ),
    'maplendar_timefield' => array(
      'arguments' => array('element' => NULL),
      'render element' => 'element',
    ),
    'maplendar_datetimefield' => array(
      'arguments' => array('element' => NULL),
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_mail().
 * 
 * Handle Mail functions
 */
function maplendar_mail($key, &$message, $vars) {
  // Load the vars
  extract($vars);
  
  switch ($key) {
    case 'invitation':
      $message['subject'] = variable_get('maplendar_invitation_mail_subject', t("You've been invited!"));
      $message['body'][] = variable_get('maplendar_invitation_mail_body', t("
You've been invited by @user_name to join his/her group: @group_name

To accept this invitation, click this link: !link

Sincerely,
Maplendar Team
      ", array(
        '@user_name' => $account->field_full_name[LANGUAGE_NONE][0]['value'], 
        '@group_name' => $group->name,
        '!link' => url('invitation/accept/' . md5($invitation->created) . '/' . $invitation->id, array('absolute' => TRUE)))));
    break;
  }
}

//==============================================================================
// PAGES
//==============================================================================

/**
 * AJAX callback that records the position of a user from the $_REQUEST array
 * 
 * Leighton Notes:
 * This is called by the jQuery code on the map page (in the maplendar_map_page.tpl.php file)
 * when the 'Update Location' button is clicked. It reads in the properties that were passed
 * in the $_REQUEST variable and saves them to the database table 'maplendar_info'
 */
function maplendar_log_position($account) {
  $position_data = array(
    'uid' => $account->uid,
    'latitude' => !empty($_REQUEST['latitude']) ? floatval($_REQUEST['latitude']) : 0,
    'longitude' => !empty($_REQUEST['longitude']) ? floatval($_REQUEST['longitude']) : 0,
    'accuracy' => !empty($_REQUEST['accuracy']) ? floatval($_REQUEST['accuracy']) : 0,
    'altitude' => !empty($_REQUEST['altitude']) ? floatval($_REQUEST['altitude']) : 0,
    'altitude_accuracy' => !empty($_REQUEST['altitude_accuracy']) ? floatval($_REQUEST['altitude_accuracy']) : 0,
    'heading' => !empty($_REQUEST['heading']) ? floatval($_REQUEST['heading']) : 0,
    'speed' => !empty($_REQUEST['speed']) ? floatval($_REQUEST['speed']) : 0,
    'updated_time' => time(),
  );
  
  $success = db_merge('maplendar_info')
    ->key(array('uid' => $account->uid))
    ->fields($position_data)
    ->execute();
  
  $result = array(
    'success' => FALSE,
  );
  
  if ($success) {
    $result = array(
      'success' => TRUE,
    );
  }
  else {
    $result = array(
      'success' => FALSE,
      'message' => t("Error writing the record to the database.")
    );
  }
  
  return drupal_json_output($result);
}

/**
 * Callback for the map page
 * 
 * Leighton Notes:
 * This is the callback function for the map page path we defined in maplendar_menu() above.
 * We just call the theme function we registered and pass the group as the variable to the
 * template file.
 */
function maplendar_map_page($group) {
  return theme('maplendar_map_page', array('group' => $group));
}

/**
 * Form builder for the invite group page
 */
function maplendar_invite_form($form, $form_state, $group) {
  drupal_set_title(t("Invite"));
  $form = array();
  $form['group'] = array(
    '#type' => 'value',
    '#value' => $group,
  );
  $form['email'] = array(
    '#title' => t("Invite via Email"),
    '#description' => t("Enter the email of the person you would like to invite 
      to join your group. They will be sent an email with an invitation link."),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Invite"),
  );
  
  return $form;
}

/**
 * Validation callback for the invite friend form
 * 
 * Leighton Notes:
 * Here we check that the user isn't already a member of the group, as well as if the
 * email address is properly formatted
 */
function maplendar_invite_form_validate($form, $form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t("Please enter a valid email address."));
  }
  $group = $form_state['values']['group'];
  if ($account = user_load_by_mail($form_state['values']['email']) AND in_array($account->uid, $group->members)) {
    form_set_error('email', t("That user is already a member of this group."));
  }
}

/**
 * Submit handler for the invite friend form
 * 
 * Leighton Notes:
 * Here we will get the email address entered and send that email an invite from
 * the currently logged in user, with a link where they can accept the invitation
 * to join the group.
 * We also store the invitation in a database table so that we can check that the
 * user is actually invited before letting them join later, for security.
 */
function maplendar_invite_form_submit($form, $form_state) {
  global $user;
  $group = $form_state['values']['group'];
  $email = $form_state['values']['email'];
  $account = user_load($user->uid);
  
  // Erase an existing record if needed
  $result = db_delete('maplendar_invites')
    ->condition('gid', $group->id)
    ->condition('email', $email)
    ->execute();
  
  // Save the invitation to the database
  $record = new stdClass();
  $record->gid = $group->id;
  $record->uid = $account->uid;
  $record->email = $email;
  $record->created = time();
  $record->accepted = 0;
  drupal_write_record('maplendar_invites', $record);
  
  // Send the email
  drupal_mail('maplendar', 'invitation', $email, user_preferred_language($account), array('account' => $account, 'group' => $group, 'invitation' => $record));
  
  drupal_set_message(t("Sent an invitation email to @email", array('@email' => $email)));
}

/**
 * Form builder for the invite group page
 */
function maplendar_accept_invite_form($form, $form_state, $md5, $invitation) {
  // Load the group
  $group = maplendar_group_load($invitation->gid);
  $account = user_load($invitation->uid);
  
  $form = array();
  $form['invitation'] = array(
    '#type' => 'value',
    '#value' => $invitation,
  );
  
  drupal_set_title(t("Accept Invitation"));
  
  $form['help'] = array(
    '#type' => 'item',
    '#markup' => t("Click below to accept the invitation from @user_name to join @group group.", 
      array('@group' => $group->name, '@user_name' => $account->field_full_name[LANGUAGE_NONE][0]['value']))
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Accept Invite"),
  );
  
  return $form;
}

/**
 * Submit handler for the invite friend form
 * 
 * Leighton Notes:
 * When the user accepts the invite, we simply create a new group member record
 * for them
 */
function maplendar_accept_invite_form_submit($form, $form_state) {
  global $user;
  $invitation = $form_state['values']['invitation'];
  
  // Erase an existing record if needed
  $result = db_delete('maplendar_invites')
    ->condition('id', $invitation->id)
    ->execute();
  
  // Save the record to the database
  $record = new stdClass();
  $record->gid = $invitation->gid;
  $record->uid = $user->uid;
  drupal_write_record('maplendar_group_members', $record);
  
  drupal_set_message(t("You have joined the group."));
  drupal_goto('group/' . $invitation->gid);
}

/**
 * Fetches and parses the google calendar xml
 * 
 * Leighton Notes:
 * Here we fetch the xml file from the $url that was passed in and parse the xml
 * to extract the events, and return those events in an array keyed by the start
 * timestamp
 */
function maplendar_get_google_calendar($url) {
  // First, strip the basic and add full
  $url = str_replace('basic', '', $url);
  $events = array();

  $confirmed = 'http://schemas.google.com/g/2005#event.confirmed';

  $start_min = date("Y-m-d\Th:i:sP", time());
  $start_max = date("Y-m-d\Th:i:sP", strtotime("+1 month"));

  $feed = $url . "full?orderby=starttime&singleevents=true&" .
    "sortorder=ascending&" .
    "start-min=" . $start_min . "&" .
    "start-max=" . $start_max;
  //drupal_set_message('<pre>' . print_r($feed, TRUE) . '</pre>');
  $doc = new DOMDocument(); 
  $doc->load( $feed );

  $entries = $doc->getElementsByTagName( "entry" ); 

  foreach ( $entries as $entry ) {
    $status = $entry->getElementsByTagName( "eventStatus" ); 
    $eventStatus = $status->item(0)->getAttributeNode("value")->value;
    if ($eventStatus == $confirmed) {
      $titles = $entry->getElementsByTagName( "title" ); 
      $title = $titles->item(0)->nodeValue;
      $title = ereg_replace(" & ", " &amp; ", $title);
      if ($original = $entry->getElementsByTagName( "originalEvent" ) AND $original_item = $original->item(0)) {
        $entry->removeChild($original_item);
      }
      $times = $entry->getElementsByTagName( "when" ); 
      $startTime = strtotime($times->item(0)->getAttributeNode("startTime")->value);
      $endTime = strtotime($times->item(0)->getAttributeNode("endTime")->value);
      $places = $entry->getElementsByTagName( "where" ); 
      $where = $places->item(0)->getAttributeNode("valueString")->value;
      
      $events[$startTime] = array(
        'title' => $title,
        'date_string' => date('M d, Y', $startTime),
        'time_string' => date('g:i A', $startTime),
        'start' => $startTime,
        'end' => $endTime,
        'where' => $where
      );
    }
  } 
  
  return $events;
}

// ======================================
// Entity Hooks
// ======================================

/**
 * Implements hook_entity_info().
 */
function maplendar_entity_info() {
  return array(
    'maplendar_group' => array(
      'label' => t('Maplendar Group'),
      'base table' => 'maplendar_groups',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
      ),
      'label callback' => 'maplendar_group_label',
      'uri callback' => 'maplendar_group_uri',
      'fieldable' => FALSE,
      'module' => 'maplendar',
    ),
    'maplendar_group_member' => array(
      'label' => t('Maplendar Group Member'),
      'base table' => 'maplendar_group_members',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
      ),
      'fieldable' => FALSE,
      'module' => 'maplendar',
    ),
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function maplendar_entity_property_info_alter(&$info) {
  $maplendar_group = &$info['maplendar_group']['properties'];
  $maplendar_group['name']['label'] = t('Name');
  $maplendar_group['uid']['type'] = 'user';
  $maplendar_group['created']['type'] = 'date';

  $maplendar_group_member = &$info['maplendar_group_member']['properties'];
  $maplendar_group_member['gid']['type'] = 'maplendar_group';
  $maplendar_group_member['uid']['type'] = 'user';
}

/**
 * Creates the label for a group
 */
function maplendar_group_label($entity, $entity_type) {
  return t('Group: @name', array('@name' => $entity->name));
}

/**
 * Creates the uri for a Group
 */
function maplendar_group_uri($entity) {
  return array(
    'path' => 'group/' . $entity->id,
    'options' => array(),
  );
}

/**
 * Implements hook_element_info
 */
function maplendar_element_info() {
  $types['maplendar_date'] = array(
    '#input' => TRUE,
    '#process' => array('ajax_process_form'),
    '#autocomplete_path' => FALSE,
    '#theme' => 'maplendar_date',
    '#theme_wrappers' => array('form_element'),
  );
  $types['maplendar_timefield'] = array(
    '#input' => TRUE,
    '#process' => array('ajax_process_form'),
    '#autocomplete_path' => FALSE,
    '#theme' => 'maplendar_timefield',
    '#theme_wrappers' => array('form_element'),
  );
  $types['maplendar_datetimefield'] = array(
    '#input' => TRUE,
    '#process' => array('ajax_process_form'),
    '#autocomplete_path' => FALSE,
    '#theme' => 'maplendar_datetimefield',
    '#theme_wrappers' => array('form_element'),
  );
  
  return $types;
}

/**
 * Returns HTML for a datefield form element.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #description, #size, #maxlength,
 *     #placeholder, #required, #attributes.
 *
 * @ingroup themeable
 */
function theme_maplendar_date($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'date';
  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength', 'placeholder'));
  _form_set_class($element, array('form-text', 'form-date'));

  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';

  return $output;
}

/**
 * Returns HTML for a timefield form element.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #description, #size, #maxlength,
 *     #placeholder, #required, #attributes.
 *
 * @ingroup themeable
 */
function theme_maplendar_timefield($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'time';
  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength', 'placeholder'));
  _form_set_class($element, array('form-text', 'form-time'));

  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';

  return $output;
}

/**
 * Returns HTML for a datetimefield form element.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #description, #size, #maxlength,
 *     #placeholder, #required, #attributes.
 *
 * @ingroup themeable
 */
function theme_maplendar_datetimefield($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'datetime';
  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength', 'placeholder'));
  _form_set_class($element, array('form-text', 'form-datetime'));

  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';

  return $output;
}