<?php

//==============================================================================
// MENU
//==============================================================================

include 'maplendar.ben.inc';

/**
 * Implements  hook_menu
 */
function maplendar_menu() {
  $items = array();
  $items['map/%maplendar_group'] = array(
    'title' => 'Map',
    'page callback' => 'maplendar_map_page',
    'page arguments' => array(1),
    'access callback' => 'maplendar_map_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['maplendar/%user/log/%'] = array(
    'page callback' => 'maplendar_log_position',
    'page arguments' => array(1),
    'access callback' => 'maplendar_log_access',
    'access arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
  );
  $items['maplendar/%user/calendar'] = array(
    'page callback' => 'maplendar_calendar_page',
    'page arguments' => array(1),
    'access callback' => 'maplendar_calendar_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['maplendar/%user/calendar/add'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('maplendar_add_event_form', 1),
    'access callback' => 'maplendar_calendar_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback for the calendar page
 */
function maplendar_calendar_access($account) {
  return TRUE; // TODO - Check that the user is in the user's group or not
}

/**
 * Check if the attempt to log position for a user is valid
 */
function maplendar_log_access($account, $key) {
  // Check if the key is set in the user object. Currently the key is just the md5 of the
  // user created timestamp. Should be more secure in real environment, randomly
  // generated each time
  if (md5($account->created) == $key) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Check if the user has access to view the map for this group
 */
function maplendar_map_access($group) {
  global $user;
  return maplendar_group_access_check($group->id, $user->uid);
}

/**
 * Checks if a user is in a group
 */
function maplendar_group_access_check($gid, $uid) {
  $result = db_select('maplendar_group_members', 'gm')
    ->fields('gm')
    ->condition('gm.uid', $uid, '=')
    ->condition('gm.gid', $gid, '=')
    ->execute();
  
  foreach ($result as $record) {
    return TRUE;
  }
  
  return FALSE;
}


//==============================================================================
// FUNCTIONS
//==============================================================================

/**
 * Implements hook_user_load()
 */
function maplendar_user_load($users) {
  // We use this to load the geolocation data into the user object
  $result = db_query('SELECT * FROM {maplendar_info} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->maplendar_geolocation = $record;
    $events = maplendar_get_user_events($record->uid);
    
    // See if this member has a google calendar
    if (!empty($users[$record->uid]->field_google_calendar_private_xm['und'][0]['value'])) {
      $google_events = maplendar_get_google_calendar($users[$record->uid]->field_google_calendar_private_xm['und'][0]['value']);
      $events += $google_events;
    }
    ksort($events);
    $users[$record->uid]->events = $events;
  }
}

/**
 * Gets an array of events from the database
 */
function maplendar_get_user_events($uid) {
  $result = db_select('maplendar_events', 'e')
    ->fields('e')
    ->condition('uid', $uid)
    ->execute();
  
  $events = array();
  
  foreach ($result as $row) {
    $events[$row->start_time] = array(
      'title' => $row->title,
      'date_string' => date('M d, Y', $row->start_time),
      'time_string' => date('g:i A', $row->start_time),
      'start' => $row->start_time,
      'where' => $row->place,
      'end' => $row->end_time,
    );
  }
  
  return $events;
}

/**
 * Loads a group given an id
 */
function maplendar_group_load($gid) {
  $result = db_select('maplendar_groups', 'g')
    ->fields('g')
    ->execute();
  
  foreach ($result as $group) {
    // Load the members for this group
    $group->members = array();
    
    $result2 = db_select('maplendar_group_members', 'gm')
      ->fields('gm')
      ->execute();
    
    foreach ($result2 as $row) {
      if ($member = user_load($row->uid)) {
        $group->members[$row->uid] = $member;
      }
    }
    
    return $group;
  }
  
  return FALSE;
}

/**
 * Implements hook_theme()
 */
function maplendar_theme($existing, $type, $theme, $path) {
  return array(
    'maplendar_map_page' => array(
      'template' => 'maplendar_map_page',
      'variables' => array(
      	'group' => NULL,
        ),
    ),
    'maplendar_calendar_page' => array(
      'template' => 'maplendar_calendar_page',
      'variables' => array(
        'account' => NULL,
        ),
    ),
  );
}

//==============================================================================
// PAGES
//==============================================================================

/**
 * AJAX callback that records the position of a user from the $_REQUEST array
 */
function maplendar_log_position($account) {
  $position_data = array(
    'uid' => $account->uid,
    'latitude' => !empty($_REQUEST['latitude']) ? floatval($_REQUEST['latitude']) : 0,
    'longitude' => !empty($_REQUEST['longitude']) ? floatval($_REQUEST['longitude']) : 0,
    'accuracy' => !empty($_REQUEST['accuracy']) ? floatval($_REQUEST['accuracy']) : 0,
    'altitude' => !empty($_REQUEST['altitude']) ? floatval($_REQUEST['altitude']) : 0,
    'altitude_accuracy' => !empty($_REQUEST['altitude_accuracy']) ? floatval($_REQUEST['altitude_accuracy']) : 0,
    'heading' => !empty($_REQUEST['heading']) ? floatval($_REQUEST['heading']) : 0,
    'speed' => !empty($_REQUEST['speed']) ? floatval($_REQUEST['speed']) : 0,
    'updated_time' => time(),
  );
  
  $success = db_merge('maplendar_info')
    ->key(array('uid' => $account->uid))
    ->fields($position_data)
    ->execute();
  
  $result = array(
    'success' => FALSE,
  );
  
  if ($success) {
    $result = array(
      'success' => TRUE,
    );
  }
  else {
    $result = array(
      'success' => FALSE,
      'message' => t("Error writing the record to the database.")
    );
  }
  
  return drupal_json_output($result);
}

/**
 * Callback for the map page
 */
function maplendar_map_page($group) {
  //drupal_add_js('http://cdn.leafletjs.com/leaflet-0.4/leaflet.js', 'external');
  //drupal_add_css('http://cdn.leafletjs.com/leaflet-0.4/leaflet.css');
  return theme('maplendar_map_page', array('group' => $group));
}

/**
 * Fetches and parses the google calendar xml
 */
function maplendar_get_google_calendar($url) {
  // First, strip the basic and add full
  $url = str_replace('basic', '', $url);
  $events = array();

  $confirmed = 'http://schemas.google.com/g/2005#event.confirmed';

  $start_min = date("Y-m-d\Th:i:sP", time());
  $start_max = date("Y-m-d\Th:i:sP", strtotime("+1 month"));

  $feed = $url . "full?orderby=starttime&singleevents=true&" .
    "sortorder=ascending&" .
    "start-min=" . $start_min . "&" .
    "start-max=" . $start_max;
  //drupal_set_message('<pre>' . print_r($feed, TRUE) . '</pre>');
  $doc = new DOMDocument(); 
  $doc->load( $feed );

  $entries = $doc->getElementsByTagName( "entry" ); 

  foreach ( $entries as $entry ) {
    $status = $entry->getElementsByTagName( "eventStatus" ); 
    $eventStatus = $status->item(0)->getAttributeNode("value")->value;
    if ($eventStatus == $confirmed) {
      $titles = $entry->getElementsByTagName( "title" ); 
      $title = $titles->item(0)->nodeValue;
      $title = ereg_replace(" & ", " &amp; ", $title);
      if ($original = $entry->getElementsByTagName( "originalEvent" ) AND $original_item = $original->item(0)) {
        $entry->removeChild($original_item);
      }
      $times = $entry->getElementsByTagName( "when" ); 
      $startTime = strtotime($times->item(0)->getAttributeNode("startTime")->value);
      $endTime = strtotime($times->item(0)->getAttributeNode("endTime")->value);
      $places = $entry->getElementsByTagName( "where" ); 
      $where = $places->item(0)->getAttributeNode("valueString")->value;
      
      $events[$startTime] = array(
        'title' => $title,
        'date_string' => date('M d, Y', $startTime),
        'time_string' => date('g:i A', $startTime),
        'start' => $startTime,
        'end' => $endTime,
        'where' => $where
      );
    }
  } 
  
  return $events;
}
